#Password Generator Project
import random

#Can be improved with some more validations

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n")) 
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

#Eazy Level - Order not randomised:
#e.g. 4 letters, 2 symbols, 2 numbers = JduE&!91
'''passw = ''

for i in range(0, nr_letters - nr_numbers - nr_symbols + 1):
  ai_numbers = random.randint(0, len(letters) - 1)
  passw += letters[ai_numbers]
  
for i in range(1, nr_symbols + 1):
  ai_symbols = random.randint(0, len(symbols) - 1)
  passw += symbols[ai_symbols]

for i in range(1, nr_numbers + 1):
  ai_numbers = random.randint(0, len(numbers) - 1)
  passw += numbers[ai_numbers]

print(passw)
'''

#Hard Level - Order of characters randomised:
#e.g. 4 letter, 2 symbol, 2 number = g^2jk8&P

''' This was my brute force solution to this problem
password = []
visited = []
for i in range(0, nr_letters + 1):
  ai_chosen = random.randint(0, len(letters) - 1)
  password += letters[ai_chosen]


for i in range(1, nr_symbols + 1):
  ai_symbols = random.randint(0, len(symbols) - 1)
  index_replace = random.randint(0, len(password) - 1)
  while(index_replace in visited):
    index_replace = random.randint(0, len(password) - 1)
  visited.append(index_replace)
  password[ai_symbols] = symbols[ai_symbols]

for i in range(1, nr_numbers + 1):
  ai_numbers = random.randint(0, len(numbers) - 1)
  index_replace = random.randint(0, len(password) - 1)
  while(index_replace in visited):
    index_replace = random.randint(0, len(password) - 1)
  visited.append(index_replace)
  password[index_replace] = numbers[ai_numbers]


generated_pass = ''

for lett in password:
  generated_pass += lett

print(password)
print(visited)
print(generated_pass)
'''
#find out that I can optimize it using a list of values of the available positons that I can use and remove each as used

password = []

# Add letters to the password
for i in range(0, nr_letters):
    ai_chosen = random.randint(0, len(letters) - 1)
    password.append(letters[ai_chosen])  # Append the character at the chosen index.

available_indices = list(range(nr_letters)) #for a list of the available indices that can be replaced 1 through chosen for nr letters [1,2,3,4,5,6...]

# Add symbols to the password
for i in range(0, nr_symbols):
    ai_symbols = random.randint(0, len(symbols) - 1)
    position = random.choice(available_indices)# Use random.randint to select from available_indices in the list 
    password[position] = symbols[ai_symbols] # use that position value as the index of our password
    available_indices.remove(position)  # Remove the chosen index value as the position I can use in password.

print(available_indices)

# Add numbers to the password
for i in range(0, nr_numbers):
    ai_numbers = random.randint(0, len(numbers) - 1)
    position = random.choice(available_indices)
    password[position] = numbers[ai_numbers]
    available_indices.remove(position)  
  
print(available_indices)

generated_pass = ''
for letnumsym in password:
  generated_pass += letnumsym

print(password)
print(generated_pass)
